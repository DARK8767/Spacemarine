Q1. Define a class MyNumber having one private integer data member. Write a parameterized
constructor to initialize to a value. Write isEven() to check given number is even or not. Use
command line argument to pass a value to the object. [10 Marks]

public class MyNumber {
    // Private integer data member
    private int number;

    // Parameterized constructor to initialize the number
    public MyNumber(int number) {
        this.number = number;
    }

    // Method to check if the number is even
    public boolean isEven() {
        return number % 2 == 0;
    }

    public static void main(String[] args) {
        if (args.length > 0) {
            try {
                // Parse the command-line argument to an integer
                int num = Integer.parseInt(args[0]);

                // Create an instance of MyNumber and pass the number
                MyNumber myNum = new MyNumber(num);

                // Display the number and check if it's even
                System.out.println("The number is: " + num);
                if (myNum.isEven()) {
                    System.out.println(num + " is an even number.");
                } else {
                    System.out.println(num + " is an odd number.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please provide a valid integer as a command-line argument.");
            }
        } else {
            System.out.println("Please provide a number as a command-line argument.");
        }
    }
}


Q2. Write a program to create a super class Employee (members – name, salary). Derive a sub- class
Programmer (member – proglanguage). Create object of Programmer and display the details of it

// Superclass representing an Employee
class Employee {
    protected String name; // Employee name
    protected double salary; // Employee salary

    // Constructor to initialize name and salary
    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    // Method to display employee details
    public void displayDetails() {
        System.out.println("Employee Name: " + name);
        System.out.println("Salary: " + salary);
    }
}

// Subclass representing a Programmer
class Programmer extends Employee {
    private String progLanguage; // Programming language

    // Constructor to initialize name, salary, and programming language
    public Programmer(String name, double salary, String progLanguage) {
        super(name, salary); // Call to Employee constructor
        this.progLanguage = progLanguage;
    }

    // Method to display programmer details
    @Override
    public void displayDetails() {
        super.displayDetails(); // Call to Employee's display method
        System.out.println("Programming Language: " + progLanguage);
    }
}

public class EmployeeDemo {
    public static void main(String[] args) {
        // Create an object of Programmer
        Programmer programmer = new Programmer("John Doe", 85000, "Java");

        // Display the details of the programmer
        programmer.displayDetails();
    }
}

