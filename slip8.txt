Q1. Write a program to reverse a number. Accept number using command line argument.
[10 Marks]

public class ReverseNumber {
    public static void main(String[] args) {
        // Check if a command line argument is provided
        if (args.length > 0) {
            try {
                // Parse the command line argument as an integer
                int number = Integer.parseInt(args[0]);
                int reverse = 0;

                // Reverse the number
                while (number != 0) {
                    int digit = number % 10;  // Get the last digit
                    reverse = reverse * 10 + digit;  // Add digit to reverse
                    number /= 10;  // Remove the last digit from the original number
                }

                System.out.println("Reversed Number: " + reverse);
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid integer as a command line argument.");
            }
        } else {
            System.out.println("Please provide a number as a command line argument.");
        }
    }
}


Q2. Define a class MyDate (day, month, year) with methods to accept and display MyDate object.
Accept date as dd, mm, yyyy. Throw user defined exception “InvalidDateException” ifthe date 
is invalid. Examples of invalid dates : 12 15 2015, 31 6 1990, 29 2 2001
import java.util.Scanner;

// Custom Exception for Invalid Date
class InvalidDateException extends Exception {
    public InvalidDateException(String message) {
        super(message);
    }
}

// Class representing a date with day, month, and year attributes
class MyDate {
    int day, month, year;

    // Method to accept date values from the user
    void acceptDate(int day, int month, int year) throws InvalidDateException {
        // Check if the date is valid
        if (!isValidDate(day, month, year)) {
            throw new InvalidDateException("Invalid Date: " + day + "/" + month + "/" + year);
        }
        this.day = day;
        this.month = month;
        this.year = year;
    }

    // Method to display the date
    void displayDate() {
        System.out.println("Date: " + day + "/" + month + "/" + year);
    }

    // Method to validate if the given day, month, and year form a valid date
    boolean isValidDate(int day, int month, int year) {
        // Check for invalid months
        if (month < 1 || month > 12) {
            return false;
        }

        // Check for invalid days
        if (day < 1 || day > daysInMonth(month, year)) {
            return false;
        }

        return true;
    }

    // Method to determine the number of days in a given month and year
    int daysInMonth(int month, int year) {
        switch (month) {
            case 1: case 3: case 5: case 7: case 8: case 10: case 12:
                return 31;
            case 4: case 6: case 9: case 11:
                return 30;
            case 2:
                // Check for leap year
                return (isLeapYear(year)) ? 29 : 28;
            default:
                return 0;
        }
    }

    // Method to check if a year is a leap year
    boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}

public class DateDemo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Create a MyDate object
        MyDate date = new MyDate();

        try {
            // Accept date details from the user
            System.out.print("Enter day (dd): ");
            int day = scanner.nextInt();
            
            System.out.print("Enter month (mm): ");
            int month = scanner.nextInt();
            
            System.out.print("Enter year (yyyy): ");
            int year = scanner.nextInt();

            // Try to assign the date to the MyDate object
            date.acceptDate(day, month, year);

            // If no exception is thrown, display the date
            date.displayDate();

        } catch (InvalidDateException e) {
            System.out.println(e.getMessage());
        } finally {
            scanner.close();
        }
    }
}


